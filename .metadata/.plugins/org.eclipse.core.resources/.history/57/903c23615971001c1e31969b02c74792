/*
 * draw_square.c

 *
 *  Created on: Jan 3, 2022
 *      Author: gurk
 */

#include "graphics.h"
#include "display_ctrl/display_ctrl.h"
#include <stdio.h>
#include "xuartps.h"
#include "math.h"
#include <ctype.h>
#include <stdlib.h>
#include "xil_types.h"
#include "xil_cache.h"
#include "timer_ps/timer_ps.h"
#include "xparameters.h"

#include "xscugic.h"
#include "xil_exception.h"
#include "xtime_l.h"

#define DYNCLK_BASEADDR XPAR_AXI_DYNCLK_0_BASEADDR
#define VGA_VDMA_ID XPAR_AXIVDMA_0_DEVICE_ID
#define DISP_VTC_ID XPAR_VTC_0_DEVICE_ID
#define VID_VTC_IRPT_ID XPS_FPGA3_INT_ID
#define VID_GPIO_IRPT_ID XPS_FPGA4_INT_ID
#define SCU_TIMER_ID XPAR_SCUTIMER_DEVICE_ID
#define UART_BASEADDR XPAR_PS7_UART_1_BASEADDR

#define BLACK 0
#define WHITE 0xFFFFFF
#define RED 0xFF0000
#define GREEN 0x00FF00
#define POKERGREEN 0x003300
#define POKERRED 0x660000
#define BLUE 0x0000FF
#define YELLOW 0xFFFF00
#define MAROON 0x800000

/* ------------------------------------------------------------ */
/*				Global Variables								*/
/* ------------------------------------------------------------ */

/*
 * Display Driver structs
 */
DisplayCtrl dispCtrl;
XAxiVdma vdma;

//GIC
XScuGic INTCInst;



/*
 * Framebuffers for video data
 */
u8  frameBuf[2][DEMO_MAX_FRAME] __attribute__((aligned(0x20)));
u8 *pFrames[2]; //array of pointers to the frame buffers

#define GRANUALITYWIDTH 640
#define GRANUALITYHEIGHT 540



struct Location {
	int x;
	int y;
};
struct Location location;

//The different suits
#define HEARTS 1
#define CLUBS 2
#define DIAMONDS 3
#define SPADES 4


u8 background[DEMO_MAX_FRAME];//to save background


int graphicsArray[GRANUALITYHEIGHT][GRANUALITYWIDTH] = {0};
int locationArray[GRANUALITYHEIGHT][GRANUALITYWIDTH] = {0};
int cardGraphicArray[13*4][60][30];


int currentPlayer = 0;
int AmountOfPlayers = 8;
int currentAmountOfDealerCards = 0;

//Player bet values
int player1Bet = 11111;
int player2Bet = 22222;
int player3Bet = 333333;
int player4Bet = 44444;
int player5Bet = 55555;
int player6Bet = 66666;
int player7Bet = 77777;
int player8Bet = 888888;
int* betValArray[8] = {&player1Bet, &player2Bet, &player3Bet, &player4Bet, &player5Bet, &player6Bet, &player7Bet, &player8Bet};
//Player balances
int player1Balance = 1111;
int player2Balance = 2222;
int player3Balance = 3333;
int player4Balance = 4444;
int player5Balance = 5555;
int player6Balance = 6666;
int player7Balance = 7777;
int player8Balance = 8888;
int* balanceArray[8] = {&player1Balance, &player2Balance, &player3Balance, &player4Balance, &player5Balance, &player6Balance, &player7Balance, &player8Balance};

/* ------------------------------------------------------------ */
/*				Procedure Definitions							*/
/* ------------------------------------------------------------ */

void initialize(){
	int Status;
		XAxiVdma_Config *vdmaConfig;
		int i;

		/*
		 * Initialize an array of pointers to the 2 frame buffers
		 */
		for (i = 0; i < DISPLAY_NUM_FRAMES; i++)
		{
			pFrames[i] = frameBuf[i];
		}

		/*
		 * Initialize a timer used for a simple delay
		 */
		TimerInitialize(SCU_TIMER_ID);

		/*
		 * Initialize VDMA driver
		 */
		vdmaConfig = XAxiVdma_LookupConfig(VGA_VDMA_ID);
		if (!vdmaConfig)
		{
			xil_printf("No video DMA found for ID %d\r\n", VGA_VDMA_ID);
			return;
		}
		Status = XAxiVdma_CfgInitialize(&vdma, vdmaConfig, vdmaConfig->BaseAddress);
		if (Status != XST_SUCCESS)
		{
			xil_printf("VDMA Configuration Initialization failed %d\r\n", Status);
			return;
		}

		/*
		 * Initialize the Display controller and start it
		 */
		Status = DisplayInitialize(&dispCtrl, &vdma, DISP_VTC_ID, DYNCLK_BASEADDR, pFrames, STRIDE);
		if (Status != XST_SUCCESS)
		{
			xil_printf("Display Ctrl initialization failed during demo initialization%d\r\n", Status);
			return;
		}
		DisplaySetMode(&dispCtrl, &VMODE_1920x1080);//set to 1080
		Status = DisplayStart(&dispCtrl);
		if (Status != XST_SUCCESS)
		{
			xil_printf("Couldn't start display during demo initialization%d\r\n", Status);
			return;
		}

		//DemoPrintTest(dispCtrl.framePtr[dispCtrl.curFrame], dispCtrl.vMode.width, dispCtrl.vMode.height, dispCtrl.stride, DEMO_PATTERN_1);
		fillInCardArray(); //for easy access

		u8 pri, trig;
		//initialize exception
		Xil_ExceptionRegisterHandler(XIL_EXCEPTION_ID_INT, (Xil_ExceptionHandler)XScuGic_InterruptHandler, &INTCInst);
		Xil_ExceptionEnable();

		//initialize GIC
		XScuGic_Config *IntcConfig;
		IntcConfig = XScuGic_LookupConfig(XPAR_PS7_SCUGIC_0_DEVICE_ID);
		Status = XScuGic_CfgInitialize(&INTCInst, IntcConfig, IntcConfig->CpuBaseAddress);
			if(Status != XST_SUCCESS) return XST_FAILURE;

		//connect vsync
		Status = XScuGic_Connect(&INTCInst,64,(Xil_ExceptionHandler)swap_handler,(void *)NULL);
				if(Status != XST_SUCCESS) return XST_FAILURE;



		XScuGic_SetPriorityTriggerType(&INTCInst,64,16,0b11);
		//XScuGic_Enable(&INTCInst, 64);
		XScuGic_GetPriTrigTypeByDistAddr(INTCInst.Config->DistBaseAddress, 64, &pri, &trig);
		XScuGic_SetPriorityTriggerType(&INTCInst,64,pri,0b11);
		return;
}


void swap_handler(void *InstancePtr){
	startOrStopScreenUpdate(0);
	printf("\r\nswap handler works");
	swapFrame();
	updateBackground();
	drawLayer();
}


void drawPixel(u8 *frame, u32 x, u32 y, unsigned int colour){
	int offset = x * PIX_STRIDE + y * STRIDE;
	frame[offset] = colour & 0xFF;
	frame[offset + 1] = (colour >> 8) & 0xFF;
	frame[offset + 2] = (colour >> 16) & 0xFF;

}
/*
void drawSquare(u32 width, u32 height, u32 x, u32 y, unsigned int colour){
	for (int i = 0; i < width; i++){
		for (int j = 0; j < height; j++){
			drawPixel(dispCtrl.framePtr[dispCtrl.curFrame], x + i, y + j, colour);
		}
	}
	flush(dispCtrl.framePtr[dispCtrl.curFrame]);
}
*/
//can specify frame
void drawSquare2(u32 width, u32 height, u32 x, u32 y, unsigned int colour, u8* frame){
	for (int i = 0; i < width; i++){
		for (int j = 0; j < height; j++){
			drawPixel(frame, x + i, y + j, colour);
		}
	}
	//flush(frame);
}

void flush(u8 *frame){
	Xil_DCacheFlushRange((unsigned int) frame, DEMO_MAX_FRAME);
}

void saveBackground(){
	int blockwidth = dispCtrl.vMode.width/GRANUALITYWIDTH;
	int blockheight = dispCtrl.vMode.height/GRANUALITYHEIGHT;


	for(int i = 0; i < GRANUALITYHEIGHT; i++){
		for(int j = 0; j < GRANUALITYWIDTH; j++){
			if(graphicsArray[i][j] == 1){
				drawSquare2(blockwidth,blockheight, j*blockwidth, i*blockheight, POKERGREEN, background);
			}
			if(graphicsArray[i][j] == 0){
				drawSquare2(blockwidth,blockheight, j*blockwidth, i*blockheight, POKERRED, background);
			}
		}
	}

	//memcpy(dispCtrl.framePtr[nextFrame()], background, DEMO_MAX_FRAME);
	//flush(dispCtrl.framePtr[nextFrame()]);
}
void updateBackground(){
	memcpy(dispCtrl.framePtr[nextFrame()], background, DEMO_MAX_FRAME);
	//flush(dispCtrl.framePtr[nextFrame()]);
}


void drawLayer(){

	XTime start;
	XTime end;


	int blockwidth = dispCtrl.vMode.width/GRANUALITYWIDTH;
	int blockheight = dispCtrl.vMode.height/GRANUALITYHEIGHT;


	for(int i = 0; i < GRANUALITYHEIGHT; i++){
		for(int j = 0; j < GRANUALITYWIDTH; j++){


			if(locationArray[i][j] >= 53 && locationArray[i][j] <= 60 ){ //show icons
				switch(locationArray[i][j]){
				case 53: //player 1
					if(currentPlayer == 0){
						showICON(0, j,  i, 1);
					}else{
						showICON(0, j,  i, 0);
					}
					break;
				case 54: //player 2
					if(currentPlayer == 1){
						showICON(1, j,  i, 1);
					}else{
						showICON(1, j,  i, 0);
					}

					break;
				case 55: //player 3
					if(currentPlayer == 2){
						showICON(2, j,  i, 1);
					}else{
						showICON(2, j,  i, 0);
					}

					break;
				case 56: //player 4
					if(currentPlayer == 3){
						showICON(3, j,  i, 1);
					}else{
						showICON(3, j,  i, 0);
					}

					break;
				case 57: //player 5
					if(currentPlayer == 4){
						showICON(4, j,  i, 1);
					}else{
						showICON(4, j,  i, 0);
					}

					break;
				case 58: //player 6
					if(currentPlayer == 5){
						showICON(5, j,  i, 1);
					}else{
						showICON(5, j,  i, 0);
					}

					break;
				case 59: //player 7
					if(currentPlayer == 6){
						showICON(6, j,  i, 1);
					}else{
						showICON(6, j,  i, 0);
					}

					break;
				case 60: //player 8
					if(currentPlayer == 7){
						showICON(7, j,  i, 1);
					}else{
						showICON(7, j,  i, 0);
					}
					break;
				default:
					break;
				}
			}
			else if (locationArray[i][j] > 0 && locationArray[i][j] < 53){//show cards
				if(locationArray[i][j] == 1){
					drawSquare2(blockwidth*10,blockheight*10, j*blockwidth, i*blockheight, 0xFFFFFF, dispCtrl.framePtr[nextFrame()]);
				}else{
					showCard(locationArray[i][j], j,  i);
				}
			}
			else if (locationArray[i][j] > 60){//show other

				switch(locationArray[i][j]){
				case 61://61 to 69 are player bets
					showChip(player1Bet, j, i);
					break;
				case 62:
					showChip(player2Bet, j, i);
					break;
				case 63:
					showChip(player3Bet, j, i);
					break;
				case 64:
					showChip(player4Bet, j, i);
					break;
				case 65:
					showChip(player5Bet, j, i);
					break;
				case 66:
					showChip(player6Bet, j, i);
					break;
				case 67:
					showChip(player7Bet, j, i);
					break;
				case 68:
					showChip(player8Bet, j, i);
					break;
				case 69: //69 to 76 are player balance boards
					showBalanceBanner(player1Balance, 0, j, i);
					break;
				case 70:
					showBalanceBanner(player2Balance, 1, j, i);
					break;
				case 71:
					showBalanceBanner(player3Balance, 2, j, i);
					break;
				case 72:
					showBalanceBanner(player4Balance, 3, j, i);
					break;
				case 73:
					showBalanceBanner(player5Balance, 4, j, i);
					break;
				case 74:
					showBalanceBanner(player6Balance, 5, j, i);
					break;
				case 75:
					showBalanceBanner(player7Balance, 6, j, i);
					break;
				case 76:
					showBalanceBanner(player8Balance, 7, j, i);
					break;
				default:
					break;
				}
			}else if(locationArray[i][j] >= 69 && locationArray[i][j] <= 76){//player balances
				showBalanceBanner(*(balanceArray[(locationArray[i][j] - 69)]), (locationArray[i][j] - 69), j, i);
			}
		}
	}
	XTime_GetTime(&start);
	flush(dispCtrl.framePtr[nextFrame()]);
	XTime_GetTime(&end);

	//printf("\r\nflushTime %.6f", (double)(end-start)/COUNTS_PER_SECOND);

}
void placeMovableObject(int x, int y, int type){
	location.x = x;
	location.y = y;
	locationArray[location.y][location.x] = type;
}
void placeObject(int x, int y, int type){
	locationArray[y][x] = type;
}

void getInput(){
	startOrStopScreenUpdate(0);
	/* Wait for data on UART */
	char userInput = 0;
	int oldx = location.x;
	int oldy = location.y;
	int newx;
	int newy;


	//while (!XUartPs_IsReceiveData(UART_BASEADDR))
	//{}

	/* Store the first character in the UART receive FIFO and echo it */
	if (XUartPs_IsReceiveData(UART_BASEADDR))
	{
		userInput = XUartPs_ReadReg(UART_BASEADDR, XUARTPS_FIFO_OFFSET);
		xil_printf("\r\n%i", userInput);
	}

	//for testing logic
	if(userInput == 'd'){
		newx = oldx + 10;
		newy = oldy;

		if(locationArray[newy][newx] == 0){
			location.x = newx;
			location.y = newy;
			locationArray[oldy][oldx] = 0;
			locationArray[newy][newx] = 1;
		}else{

		}

	}else if(userInput == 'a'){
		newx = oldx - 10;
		newy = oldy;


		if(locationArray[newy][newx] == 0){
			location.x = newx;
			location.y = newy;
			locationArray[oldy][oldx] = 0;
			locationArray[newy][newx] = 1;
		}else{

		}
	}
	else if(userInput == 's'){
		newx = oldx;
		newy = oldy + 10;
		if(locationArray[newy][newx] == 0){
			location.x = newx;
			location.y = newy;
			locationArray[oldy][oldx] = 0;
			locationArray[newy][newx] = 1;
		}else{

		}
	}
	else if(userInput == 'w'){
		newx = oldx;
		newy = oldy - 10;
		if(locationArray[newy][newx] == 0){
			location.x = newx;
			location.y = newy;
			locationArray[oldy][oldx] = 0;
			locationArray[newy][newx] = 1;
		}else{

		}
	}
	else if(userInput == 'n'){//testing highlighting current player
		nextPlayer();
	}
	else if(userInput == 'v'){//testing giving dealer cards
		placeDealerCard(1, 3);
	}
	else if(userInput == 'c'){//testing being able to remove dealers cards
		clearDealerCards();
	}
	else if(userInput == 'h'){//testing being able to remove players cards
		clearPlayerCards(0);
	}
	else if(userInput == 'o'){//testing being able to alter bet counter
		setPlayerBet(0, 6969);
	}
	startOrStopScreenUpdate(1);
}
void createBackground(){
	int topBotGap = GRANUALITYHEIGHT/10;
	int tablewidth = GRANUALITYWIDTH/2;
	int tableheight = GRANUALITYHEIGHT - (topBotGap*2);



	for(int i = 0; i < GRANUALITYHEIGHT; i++){
		for(int j = 0; j < GRANUALITYWIDTH; j++){
			if( i >= topBotGap && i <= GRANUALITYHEIGHT-topBotGap){
				if( j >= ((GRANUALITYWIDTH-tablewidth)/2) && j <= ((GRANUALITYWIDTH-tablewidth)/2+tablewidth)){
					graphicsArray[i][j] = 1;
				}
			}
		}
		if(i <= GRANUALITYHEIGHT/2 && tablewidth < GRANUALITYWIDTH){
			tablewidth++;
		}
		if(i > GRANUALITYHEIGHT/2 && tablewidth > GRANUALITYWIDTH/2){
			tablewidth--;
		}
	}
}
void swapFrame(){
	int status;
	if(dispCtrl.curFrame == 0){
		status = DisplayChangeFrame(&dispCtrl, 1);
	}else {
		status = DisplayChangeFrame(&dispCtrl, 0);
	}
}
int nextFrame(){
	if(dispCtrl.curFrame == 0){
		return 1;
	}else{
		return 0;
	}
}
void showCard(int cardVal, int x, int y){
	int blockwidth = dispCtrl.vMode.width/GRANUALITYWIDTH;
	int blockheight = dispCtrl.vMode.height/GRANUALITYHEIGHT;

	//printf("\ncardVal %d", cardVal);

		for(int i = 0; i < CardHeight; i++){
			for(int j = 0; j < CardWidth; j++){
				if(cardGraphicArray[cardVal][i][j] == 0){
					drawSquare2(blockwidth,blockheight, (x + j)*blockwidth, (y + i)*blockheight, 0xFFFFFF, dispCtrl.framePtr[nextFrame()]);
				}else if(cardGraphicArray[cardVal][i][j] == 1){
					drawSquare2(blockwidth,blockheight, (x + j)*blockwidth, (y + i)*blockheight, 0x000000, dispCtrl.framePtr[nextFrame()]);
				}
			}
		}


}
void showICON(int player,int x, int y, int highlight){
	int blockwidth = dispCtrl.vMode.width/GRANUALITYWIDTH;
	int blockheight = dispCtrl.vMode.height/GRANUALITYHEIGHT;
	int backgroundcolor = 0xFFFFFF;

	if(highlight == 1){//change to yellow if highlighted
		backgroundcolor = 0xFFFF00;
	}

	for(int i = 0; i < 30; i++){
		for(int j = 0; j < 30; j++){
			if(playerICONS[player][i][j] == 0){
				drawSquare2(blockwidth,blockheight, (x + j)*blockwidth, (y + i)*blockheight, backgroundcolor, dispCtrl.framePtr[nextFrame()]);
			}else if(playerICONS[player][i][j] == 1){
				drawSquare2(blockwidth,blockheight, (x + j)*blockwidth, (y + i)*blockheight, 0x000000, dispCtrl.framePtr[nextFrame()]);
			}
		}
	}
}

void showChip(int value, int x, int y){
	int blockwidth = dispCtrl.vMode.width/GRANUALITYWIDTH;
	int blockheight = dispCtrl.vMode.height/GRANUALITYHEIGHT;

	int num7 = 0,num6 = 0,num5 = 0,num4 = 0,num3 = 0,num2 = 0,num1 = 0;
	numToDigits(value, &num7, &num6, &num5, &num4, &num3, &num2, &num1);
	  //printf("\n\r%d %d %d %d %d %d %d",num7,num6,num5,num4,num3,num2,num1);


	for(int i = 0; i < 60; i++){
		for(int j = 0; j < 60; j++){
			if(chip[i][j] == 0){
				drawSquare2(blockwidth,blockheight, (x + j)*blockwidth, (y + i)*blockheight, 0xFFFFFF, dispCtrl.framePtr[nextFrame()]);
			}else if(chip[i][j] == 1){
				drawSquare2(blockwidth,blockheight, (x + j)*blockwidth, (y + i)*blockheight, 0x000000, dispCtrl.framePtr[nextFrame()]);
			}else if(chip[i][j] == 3){
				drawSquare2(blockwidth,blockheight, (x + j)*blockwidth, (y + i)*blockheight, 0xFF0000, dispCtrl.framePtr[nextFrame()]);
			}
			else if(chip[i][j] == 4){
				drawsmallNum((x + j), (y + i), num1, blockwidth, blockheight, 0x000000, 0xFFFFFF);
			}
			else if(chip[i][j] == 5){
				drawsmallNum((x + j), (y + i), num2, blockwidth, blockheight,0x000000, 0xFFFFFF);
			}
			else if(chip[i][j] == 6){
				drawsmallNum((x + j), (y + i), num3, blockwidth, blockheight,0x000000, 0xFFFFFF);
			}
			else if(chip[i][j] == 7){
				drawsmallNum((x + j), (y + i), num4, blockwidth, blockheight,0x000000, 0xFFFFFF);
			}
			else if(chip[i][j] == 8){
				drawsmallNum((x + j), (y + i), num5, blockwidth, blockheight,0x000000, 0xFFFFFF);
			}
			else if(chip[i][j] == 9){
				drawsmallNum((x + j), (y + i), num6, blockwidth, blockheight,0x000000, 0xFFFFFF);
			}
			else if(chip[i][j] == 10){
				drawsmallNum((x + j), (y + i), num7, blockwidth, blockheight,0x000000, 0xFFFFFF);
			}

		}
	}
}


void showBalanceBanner(int value, int player, int x, int y){
	int blockwidth = dispCtrl.vMode.width/GRANUALITYWIDTH;
	int blockheight = dispCtrl.vMode.height/GRANUALITYHEIGHT;

	int num7 = 0,num6 = 0,num5 = 0,num4 = 0,num3 = 0,num2 = 0,num1 = 0;
		numToDigits(value, &num7, &num6, &num5, &num4, &num3, &num2, &num1);
	printf("\n\r%d %d %d %d %d %d %d",num7,num6,num5,num4,num3,num2,num1);

	for(int i = 0; i < 30; i++){
		for(int j = 0; j < 60; j++){
			switch(balanceBanner[i][j]){
			case 0:
				printf("case0");
				drawSquare2(blockwidth, blockheight,(x + j)*blockwidth, (y + i)*blockheight, 0x000000, dispCtrl.framePtr[nextFrame()]);
				break;
			case 1:
				drawSquare2(blockwidth, blockheight,(x + j)*blockwidth, (y + i)*blockheight, 0xFFFFFF, dispCtrl.framePtr[nextFrame()]);
				break;
			case 2:
				//do nothing
				break;
			case 3:
				drawsmallNum((x + j), (y + i), num1, blockwidth, blockheight, 0xFFFFFF, 0x000000);
				break;
			case 4:
				drawsmallNum((x + j), (y + i), num2, blockwidth, blockheight, 0xFFFFFF, 0x000000);
				break;
			case 5:
				drawsmallNum((x + j), (y + i), num3, blockwidth, blockheight, 0xFFFFFF, 0x000000);
				break;
			case 6:
				drawsmallNum((x + j), (y + i), num4, blockwidth, blockheight, 0xFFFFFF, 0x000000);
				break;
			case 7:
				drawsmallNum((x + j), (y + i), num5, blockwidth, blockheight, 0xFFFFFF, 0x000000);
				break;
			case 8:
				drawsmallNum((x + j), (y + i), num6, blockwidth, blockheight, 0xFFFFFF, 0x000000);
				break;
			case 9:
				drawsmallNum((x + j), (y + i), num7, blockwidth, blockheight, 0xFFFFFF, 0x000000);
				break;
			case 10:
				drawsmallNum((x + j), (y + i), player+1, blockwidth, blockheight, 0xFFFFFF, 0x000000);
				break;
			default :
				break;
			}
		}
	}
}



void drawsmallNum(int x, int y, int number, int blockwidth, int blockheight, int linecolor, int backgroundcolor){
	for(int i = 0; i < 9; i++){
		for(int j = 0; j < 9; j++){
			if(smallDigit[number][i][j]== 0){
				drawSquare2(blockwidth,blockheight, (x + j)*blockwidth, (y + i)*blockheight, backgroundcolor, dispCtrl.framePtr[nextFrame()]);
			}else if(smallDigit[number][i][j] == 1){
				drawSquare2(blockwidth,blockheight, (x + j)*blockwidth, (y + i)*blockheight, linecolor, dispCtrl.framePtr[nextFrame()]);
			}
		}
	}
}

void arrayContents(){
	printf("\r\n#####location#######\r\n");
	for(int i = 0; i < GRANUALITYHEIGHT; i++){
			for(int j = 0; j < GRANUALITYWIDTH; j++){
				printf("%d", locationArray[i][j]);
			}
			printf("\r\n");
		}
}
//for testing player highlighting
void nextPlayer(){
	if(currentPlayer < (AmountOfPlayers - 1)){
		currentPlayer++;
	}else{
		currentPlayer = 0;
	}
}
void initializePlayerEmblems(){
	switch(AmountOfPlayers){
		case 8:
			//icon8
			placeObject(640 - 15 - 30, 540 - 150 - 30, 60);
		case 7:
			//icon7
			placeObject(640 - 15 - 30, 150, 59);
		case 6:
			//icon6
			placeObject(375, 15, 58);
		case 5:
			//icon5
			placeObject(225, 15, 57);
		case 4:
			//icon4
			placeObject(20, 150, 56);
		case 3:
			//icon3
			placeObject(20, 540 - 150 - 30, 55);
		case 2:
			//icon2
			placeObject(225, 540 - 30 - 15, 54);
		case 1:
			//icon1
			placeObject(375, 540 - 30 - 15, 53);
		default :
			break;
	}
}

void initChips(){
	int chipval = 61;
	for(int i = 0; i < AmountOfPlayers; i++ ){
		placeObject(PlayerChipCoords[i][0], PlayerChipCoords[i][1], chipval);
		chipval++;
	}
}


void fillInCardArray(){
	memcpy(cardGraphicArray[0], clover2 ,sizeof(clover2));
	memcpy(cardGraphicArray[1], clover2 ,sizeof(clover2));
	memcpy(cardGraphicArray[2], clover2 ,sizeof(clover2));
	memcpy(cardGraphicArray[rankSuitToIndex(1, 3)], aceOfDiamonds ,sizeof(aceOfDiamonds));
	memcpy(cardGraphicArray[rankSuitToIndex(2, 3)], twoOfDiamonds ,sizeof(twoOfDiamonds));
	memcpy(cardGraphicArray[rankSuitToIndex(3, 3)], threeOfDiamonds ,sizeof(threeOfDiamonds));
	memcpy(cardGraphicArray[rankSuitToIndex(4, 3)], fourOfDiamonds ,sizeof(fourOfDiamonds));
	memcpy(cardGraphicArray[rankSuitToIndex(5, 3)], fiveOfDiamonds ,sizeof(fiveOfDiamonds));
	memcpy(cardGraphicArray[rankSuitToIndex(6, 3)], sixOfDiamonds ,sizeof(sixOfDiamonds));
	memcpy(cardGraphicArray[rankSuitToIndex(7, 3)], sevenOfDiamonds ,sizeof(sevenOfDiamonds));
	memcpy(cardGraphicArray[rankSuitToIndex(9, 3)], nineOfDiamonds ,sizeof(nineOfDiamonds));
}

void setPlayerCards(int player, int rank, int suit, int cardNum){
	int x;
	int y;
	if(cardNum == 1){
		x   = PlayerCardCoords[player][0];
		y   = PlayerCardCoords[player][1];
	}else{
		x   = PlayerCardCoords[player][2];
		y   = PlayerCardCoords[player][3];
	}

	placeObject(x, y, rankSuitToIndex(rank, suit));
}
int rankSuitToIndex(int rank, int suit){
	return ((rank-1)+(suit-1)*13);
}
void placeDealerCard(int rank, int suit){
	if(currentAmountOfDealerCards < 5){
		placeObject(DealerCardCoords[currentAmountOfDealerCards][0],DealerCardCoords[currentAmountOfDealerCards][1], rankSuitToIndex(rank, suit));
		currentAmountOfDealerCards++;
	}
}
void clearDealerCards(int rank, int suit){
		placeObject(DealerCardCoords[0][0],DealerCardCoords[0][1], 0);
		placeObject(DealerCardCoords[1][0],DealerCardCoords[1][1], 0);
		placeObject(DealerCardCoords[2][0],DealerCardCoords[2][1], 0);
		placeObject(DealerCardCoords[3][0],DealerCardCoords[3][1], 0);
		placeObject(DealerCardCoords[4][0],DealerCardCoords[4][1], 0);
		currentAmountOfDealerCards = 0;
}

void clearPlayerCards(int player){
	placeObject(PlayerCardCoords[player][0],PlayerCardCoords[player][1], 0);
	placeObject(PlayerCardCoords[player][2],PlayerCardCoords[player][3], 0);
}

void setPlayerBet(int player, int bet){
	*(betValArray[player]) = bet;
}
void setAmountOfPlayers(int playercount){
	if (playercount > 8){
		AmountOfPlayers = 8;
	}else{
		AmountOfPlayers = playercount;
	}
}


//enables or disables screen updates
void startOrStopScreenUpdate(int startStop){
	if (startStop == 1){
		XScuGic_Enable(&INTCInst, 64);
	}else{
		XScuGic_Disable(&INTCInst,64);
	}
}
void numToDigits(int num, int* dig7, int* dig6, int* dig5, int* dig4, int* dig3, int* dig2, int* dig1){
    int currentNum = num;
    int count = 0;
    while(!(currentNum <= 0)){
        currentNum  = currentNum - 1000000;
        count++;
    }
    if(currentNum < 0){
        currentNum  = currentNum + 1000000;
        count--;
    }
    *dig7 = count;
    count = 0;

    while(!(currentNum <= 0)){
        currentNum  = currentNum - 100000;
        count++;
    }
    if(currentNum < 0){
        currentNum  = currentNum + 100000;
        count--;
    }
    *dig6 = count;
    count = 0;

    while(!(currentNum <= 0)){
    currentNum  = currentNum - 10000;
    count++;
    }
    if(currentNum < 0){
        currentNum  = currentNum + 10000;
        count--;
    }
    *dig5 = count;
    count = 0;


    while(!(currentNum <= 0)){
    currentNum  = currentNum - 1000;
    count++;
    }
    if(currentNum < 0){
        currentNum  = currentNum + 1000;
        count--;
    }
    *dig4 = count;
    count = 0;

    while(!(currentNum <= 0)){
        currentNum  = currentNum - 100;
        count++;
    }
    if(currentNum < 0){
        currentNum  = currentNum + 100;
        count--;
    }
    *dig3 = count;
    count = 0;

    while(!(currentNum <= 0)){
        currentNum  = currentNum - 10;
        count++;
    }
    if(currentNum < 0){
        currentNum  = currentNum + 10;
        count--;
    }
    *dig2 = count;
    count = 0;

    while(!(currentNum <= 0)){
        currentNum  = currentNum - 1;
        count++;
    }
    if(currentNum < 0){
        currentNum  = currentNum + 1;
        count--;
    }
    *dig1 = count;
    count = 0;
}

