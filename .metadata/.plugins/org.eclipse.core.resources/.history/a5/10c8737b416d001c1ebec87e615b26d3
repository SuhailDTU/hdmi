/*
 * draw_square.c

 *
 *  Created on: Jan 3, 2022
 *      Author: gurk
 */

#include "graphics.h"
#include "display_ctrl/display_ctrl.h"
#include <stdio.h>
#include "xuartps.h"
#include "math.h"
#include <ctype.h>
#include <stdlib.h>
#include "xil_types.h"
#include "xil_cache.h"
#include "timer_ps/timer_ps.h"
#include "xparameters.h"

#define DYNCLK_BASEADDR XPAR_AXI_DYNCLK_0_BASEADDR
#define VGA_VDMA_ID XPAR_AXIVDMA_0_DEVICE_ID
#define DISP_VTC_ID XPAR_VTC_0_DEVICE_ID
#define VID_VTC_IRPT_ID XPS_FPGA3_INT_ID
#define VID_GPIO_IRPT_ID XPS_FPGA4_INT_ID
#define SCU_TIMER_ID XPAR_SCUTIMER_DEVICE_ID
#define UART_BASEADDR XPAR_PS7_UART_1_BASEADDR

#define BLACK 0
#define WHITE 0xFFFFFF
#define RED 0xFF0000
#define GREEN 0x00FF00
#define BLUE 0x0000FF
#define YELLOW 0xFFFF00
#define MAROON 0x800000

/* ------------------------------------------------------------ */
/*				Global Variables								*/
/* ------------------------------------------------------------ */

/*
 * Display Driver structs
 */
DisplayCtrl dispCtrl;
XAxiVdma vdma;

/*
 * Framebuffers for video data
 */
u8  frameBuf[DISPLAY_NUM_FRAMES][DEMO_MAX_FRAME] __attribute__((aligned(0x20)));
u8 *pFrames[DISPLAY_NUM_FRAMES]; //array of pointers to the frame buffers


/* ------------------------------------------------------------ */
/*				Procedure Definitions							*/
/* ------------------------------------------------------------ */

void initialize(){
	int Status;
		XAxiVdma_Config *vdmaConfig;
		int i;

		/*
		 * Initialize an array of pointers to the 3 frame buffers
		 */
		for (i = 0; i < DISPLAY_NUM_FRAMES; i++)
		{
			pFrames[i] = frameBuf[i];
		}

		/*
		 * Initialize a timer used for a simple delay
		 */
		TimerInitialize(SCU_TIMER_ID);

		/*
		 * Initialize VDMA driver
		 */
		vdmaConfig = XAxiVdma_LookupConfig(VGA_VDMA_ID);
		if (!vdmaConfig)
		{
			xil_printf("No video DMA found for ID %d\r\n", VGA_VDMA_ID);
			return;
		}
		Status = XAxiVdma_CfgInitialize(&vdma, vdmaConfig, vdmaConfig->BaseAddress);
		if (Status != XST_SUCCESS)
		{
			xil_printf("VDMA Configuration Initialization failed %d\r\n", Status);
			return;
		}

		/*
		 * Initialize the Display controller and start it
		 */
		Status = DisplayInitialize(&dispCtrl, &vdma, DISP_VTC_ID, DYNCLK_BASEADDR, pFrames, STRIDE);
		if (Status != XST_SUCCESS)
		{
			xil_printf("Display Ctrl initialization failed during demo initialization%d\r\n", Status);
			return;
		}
		Status = DisplayStart(&dispCtrl);
		if (Status != XST_SUCCESS)
		{
			xil_printf("Couldn't start display during demo initialization%d\r\n", Status);
			return;
		}

		//DemoPrintTest(dispCtrl.framePtr[dispCtrl.curFrame], dispCtrl.vMode.width, dispCtrl.vMode.height, dispCtrl.stride, DEMO_PATTERN_1);

		return;
}

void demoPrintTest(u8 *frame, u32 width, u32 height, u32 stride)
{
	u32 xcoi, ycoi;
	u32 iPixelAddr;
	u8 wRed, wBlue, wGreen;
	u32 wCurrentInt;
	double fRed, fBlue, fGreen, fColor;
	u32 xLeft, xMid, xRight, xInt;
	u32 yMid, yInt;
	double xInc, yInc;

	xInt = width / 4; //Four intervals, each with width/4 pixels
	xLeft = xInt * 3;
	xMid = xInt * 2 * 3;
	xRight = xInt * 3 * 3;
	xInc = 256.0 / ((double) xInt); //256 color intensities are cycled through per interval (overflow must be caught when color=256.0)

	yInt = height / 2; //Two intervals, each with width/2 lines
	yMid = yInt;
	yInc = 256.0 / ((double) yInt); //256 color intensities are cycled through per interval (overflow must be caught when color=256.0)

	fBlue = 0.0;
	fRed = 256.0;
	for(xcoi = 0; xcoi < (width*4); xcoi+=4)
	{
		/*
		 * Convert color intensities to integers < 256, and trim values >=256
		 */
		wRed = (fRed >= 256.0) ? 255 : ((u8) fRed);
		wBlue = (fBlue >= 256.0) ? 255 : ((u8) fBlue);
		iPixelAddr = xcoi;
		fGreen = 0.0;
		for(ycoi = 0; ycoi < height; ycoi++)
		{

			wGreen = (fGreen >= 256.0) ? 255 : ((u8) fGreen);
			frame[iPixelAddr] = wRed;
			frame[iPixelAddr + 1] = wBlue;
			frame[iPixelAddr + 2] = wGreen;
			if (ycoi < yMid)
			{
				fGreen += yInc;
			}
			else
			{
				fGreen -= yInc;
			}

			/*
			 * This pattern is printed one vertical line at a time, so the address must be incremented
			 * by the stride instead of just 1.
			 */
			iPixelAddr += stride;
		}

		if (xcoi < xLeft)
		{
			fBlue = 0.0;
			fRed -= xInc;
		}
		else if (xcoi < xMid)
		{
			fBlue += xInc;
			fRed += xInc;
		}
		else if (xcoi < xRight)
		{
			fBlue -= xInc;
			fRed -= xInc;
		}
		else
		{
			fBlue += xInc;
			fRed = 0;
		}
	}
	Xil_DCacheFlushRange((unsigned int) frame, DEMO_MAX_FRAME);
}


void testPattern(u8 *frame, u32 width, u32 height, u32 stride){
	u32 xcoi, ycoi;
	u32 iPixelAddr;
	u8 wRed, wBlue, wGreen;
	u32 wCurrentInt;
	double fRed, fBlue, fGreen, fColor;
	u32 xLeft, xMid, xRight, xInt;
	u32 yMid, yInt;
	double xInc, yInc;

	xInt = width / 4; //Four intervals, each with width/4 pixels
	xLeft = xInt * 3;
	xMid = xInt * 2 * 3;
	xRight = xInt * 3 * 3;
	xInc = 256.0 / ((double) xInt); //256 color intensities are cycled through per interval (overflow must be caught when color=256.0)

	yInt = height / 2; //Two intervals, each with width/2 lines
	yMid = yInt;
	yInc = 256.0 / ((double) yInt); //256 color intensities are cycled through per interval (overflow must be caught when color=256.0)

	fBlue = 0.0;
	fRed = 256.0;
	for(xcoi = 0; xcoi < (width*4); xcoi+=4)
	{
		/*
		 * Convert color intensities to integers < 256, and trim values >=256
		 */
		wRed = (fRed >= 256.0) ? 255 : ((u8) fRed);
		wBlue = (fBlue >= 256.0) ? 255 : ((u8) fBlue);
		iPixelAddr = xcoi;
		fGreen = 0.0;
		for(ycoi = 0; ycoi < height; ycoi++)
		{

			wGreen = (fGreen >= 256.0) ? 255 : ((u8) fGreen);
			frame[iPixelAddr] = wRed;
			frame[iPixelAddr + 1] = wBlue;
			frame[iPixelAddr + 2] = wGreen;
			if (ycoi < yMid)
			{
				fGreen += yInc;
			}
			else
			{
				fGreen -= yInc;
			}

			/*
			 * This pattern is printed one vertical line at a time, so the address must be incremented
			 * by the stride instead of just 1.
			 */
			iPixelAddr += stride;
		}

		if (xcoi < xLeft)
		{
			fBlue = 0.0;
			fRed -= xInc;
		}
		else if (xcoi < xMid)
		{
			fBlue += xInc;
			fRed += xInc;
		}
		else if (xcoi < xRight)
		{
			fBlue -= xInc;
			fRed -= xInc;
		}
		else
		{
			fBlue += xInc;
			fRed = 0;
		}
	}
	/*
	 * Flush the framebuffer memory range to ensure changes are written to the
	 * actual memory, and therefore accessible by the VDMA.
	 */
	Xil_DCacheFlushRange((unsigned int) frame, DEMO_MAX_FRAME);
	/*
	 * Flush the framebuffer memory range to ensure changes are written to the
	 * actual memory, and therefore accessible by the VDMA.
	 */
	Xil_DCacheFlushRange((unsigned int) frame, DEMO_MAX_FRAME);
}

void drawPixel(u8 *frame, u32 x, u32 y, unsigned int colour){
	int offset = x * PIX_STRIDE + y * STRIDE;
	frame[offset] = colour & 0xFF;
	frame[offset + 1] = (colour >> 8) & 0xFF;
	frame[offset + 2] = (colour >> 16) & 0xFF;

}

void drawSquare(u32 width, u32 height, u32 x, u32 y, unsigned int colour){
	for (int i = 0; i < width; i++){
		for (int j = 0; j < height; j++){
			drawPixel(dispCtrl.framePtr[dispCtrl.curFrame], x + i, y + j, colour);
		}
	}
	flush(dispCtrl.framePtr[dispCtrl.curFrame]);
}

void flush(u8 *frame){
	Xil_DCacheFlushRange((unsigned int) frame, DEMO_MAX_FRAME);
}



